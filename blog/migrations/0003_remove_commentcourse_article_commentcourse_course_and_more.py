# Generated by Django 4.2 on 2023-05-10 14:13

import ckeditor_uploader.fields
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import taggit.managers


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('taggit', '0005_auto_20220424_2025'),
        ('blog', '0002_alter_article_id_alter_category_id_alter_comment_id_and_more'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='commentcourse',
            name='article',
        ),
        migrations.AddField(
            model_name='commentcourse',
            name='course',
            field=models.ForeignKey(default=0, on_delete=django.db.models.deletion.CASCADE, related_name='commentscourse', to='blog.course'),
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=250)),
                ('slug', models.SlugField()),
                ('image', models.ImageField(default='subject-default.jpg', upload_to='subject_pics')),
                ('image_credit', models.CharField(blank=True, max_length=250, null=True)),
                ('body', ckeditor_uploader.fields.RichTextUploadingField(blank=True)),
                ('date_published', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('DRAFTED', 'Draft'), ('PUBLISHED', 'Publish')], default='DRAFT', max_length=10)),
                ('views', models.PositiveIntegerField(default=0)),
                ('count_words', models.CharField(default=0, max_length=50)),
                ('read_time', models.CharField(default=0, max_length=50)),
                ('deleted', models.BooleanField(default=False)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subjects', to=settings.AUTH_USER_MODEL)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subjects', to='blog.course')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'ordering': ('-date_published',),
                'unique_together': {('title',)},
            },
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=250)),
                ('slug', models.SlugField()),
                ('image', models.ImageField(default='rooms-default.jpg', upload_to='rooms_pics')),
                ('image_credit', models.CharField(blank=True, max_length=250, null=True)),
                ('body', ckeditor_uploader.fields.RichTextUploadingField(blank=True)),
                ('date_published', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('DRAFTED', 'Draft'), ('PUBLISHED', 'Publish')], default='DRAFT', max_length=10)),
                ('views', models.PositiveIntegerField(default=0)),
                ('count_words', models.CharField(default=0, max_length=50)),
                ('read_time', models.CharField(default=0, max_length=50)),
                ('deleted', models.BooleanField(default=False)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rooms', to=settings.AUTH_USER_MODEL)),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rooms', to='blog.subject')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'ordering': ('-date_published',),
                'unique_together': {('title',)},
            },
        ),
        migrations.CreateModel(
            name='Rep',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=250)),
                ('slug', models.SlugField()),
                ('image', models.ImageField(default='rep-default.jpg', upload_to='rep_pics')),
                ('image_credit', models.CharField(blank=True, max_length=250, null=True)),
                ('body', ckeditor_uploader.fields.RichTextUploadingField(blank=True)),
                ('date_published', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('DRAFTED', 'Draft'), ('PUBLISHED', 'Publish')], default='DRAFT', max_length=10)),
                ('views', models.PositiveIntegerField(default=0)),
                ('count_words', models.CharField(default=0, max_length=50)),
                ('read_time', models.CharField(default=0, max_length=50)),
                ('deleted', models.BooleanField(default=False)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reps', to=settings.AUTH_USER_MODEL)),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reps', to='blog.room')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'ordering': ('-date_published',),
                'unique_together': {('title',)},
            },
        ),
        migrations.CreateModel(
            name='Mem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=250)),
                ('slug', models.SlugField()),
                ('image', models.ImageField(default='mem-default.jpg', upload_to='mem_pics')),
                ('image_credit', models.CharField(blank=True, max_length=250, null=True)),
                ('body', ckeditor_uploader.fields.RichTextUploadingField(blank=True)),
                ('date_published', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('DRAFTED', 'Draft'), ('PUBLISHED', 'Publish')], default='DRAFT', max_length=10)),
                ('views', models.PositiveIntegerField(default=0)),
                ('count_words', models.CharField(default=0, max_length=50)),
                ('read_time', models.CharField(default=0, max_length=50)),
                ('deleted', models.BooleanField(default=False)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mems', to=settings.AUTH_USER_MODEL)),
                ('rep', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mems', to='blog.rep')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'ordering': ('-date_published',),
                'unique_together': {('title',)},
            },
        ),
    ]
